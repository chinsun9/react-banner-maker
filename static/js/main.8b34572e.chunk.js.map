{"version":3,"sources":["modules/history/reducer.ts","modules/canvas/actions.ts","modules/canvas/index.ts","modules/common/utils.ts","modules/history/actions.ts","components/Header.tsx","hooks/useHistory.tsx","hooks/useCanvasActions.tsx","components/HistoryItem.tsx","components/HistoryList.tsx","hooks/useCanvas.tsx","components/SettingCanvasSize.tsx","components/SideTab.tsx","components/Canvas.tsx","components/Textfield.tsx","components/SettingCanvasDetail.tsx","components/ExportButtons.tsx","hooks/useAddHistory.tsx","modules/common/copyToClipboard.js","App.tsx","serviceWorker.ts","modules/index.ts","index.tsx","modules/history/index.ts","modules/canvas/reducer.ts"],"names":["history","createReducer","ADD_HISTORY","state","canvasValue","payload","concat","id","Math","max","map","historyItem","value","REMOVE_HISTORY","filter","SET_CANVAS_SIZE","SET_CANVAS_TEXT","SET_CANVAS_FONT_SIZE","SET_CANVAS_FONT_COLOR","SET_CANVAS_BACKGROUND_COLOR","SET_CANVAS_COLOR","SET_CANVAS_DATA_URL","setCanvasSize","createAction","setCanvasText","setCanvasFontSize","setCanvasFontColor","setCanvasBackgroundColor","setCanvasColor","setCanvasDataURL","randomColorGenerator","bg_colour","floor","random","toString","slice","getColorByBgColor","bgColor","parseInt","replace","saveAs","uri","filename","link","document","createElement","download","href","body","appendChild","click","removeChild","window","open","addHistory","Header","className","useHistory","useSelector","useCanvasActions","dispatch","useDispatch","onChangeCanvasSize","useCallback","inputValue","onChangeCanvasText","text","onChangeCanvasFontSize","size","onChangeCanvasFontColor","color","onChangeCanvasBackgroundColor","randomCanvasColor","colors","onChangeCanvas","dataURL","HistoryItem","styles","reactCSS","BackgroundColor","background","background_color","font_color","style","onClick","HistoryList","length","key","useCanvas","canvas","SettingCanvasSize","width","height","onChange","e","preventDefault","name","target","Number","type","placeholder","min","SideTab","viewBox","focusable","data-icon","fill","aria-hidden","d","Canvas","canvasRef","useRef","font_size","useEffect","current","ctx","clearRect","backgroundColor","fillStyle","fillRect","fontSize","font","textBaseline","textAlign","defaultWidth","defaultHeight","fontHeight","lines","split","forEach","line","index","middle","h","fillText","mid","_line","reduce","prev","curr","subtract","push","sign","offset","drawCanvas","getContext","toDataURL","console","info","ref","Textfield","textfieldStyle","rows","initialBackgroundColorPickerState","displayColorPicker","initialFontColorPickerState","useState","backgroundColorPickerState","setBackgroundColorPickerState","fontColorPickerState","setFontColorPickerState","colorBackgroundColor","borderRadius","colorFontColor","swatch","padding","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","htmlFor","list","hex","ExportButtons","useAddHistory","querySelector","toBlob","blob","item","ClipboardItem","navigator","clipboard","write","copyToClipboard","last_history_item","App","Boolean","location","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message","initBackgroundColor","initialState","action"],"mappings":"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","file":"static/js/main.8b34572e.chunk.js","sourcesContent":["import { createReducer } from 'typesafe-actions';\r\nimport { ADD_HISTORY, REMOVE_HISTORY } from './actions';\r\nimport { HistoryAction, HistoryState } from './types';\r\n\r\n\r\n// 초깃값 설정\r\nconst initialState: HistoryState = [\r\n    // { id: 1, value:{ background_color:'#fff', font_color:'#000',font_size:20,height:300,text:\"hello\",width:300,dataURL:''} },\r\n    // { id: 2, value:{ background_color:'#000', font_color:'#fff',font_size:30,height:320,text:\"hello2\",width:300,dataURL:''} },\r\n    // { id: 3, value:{ background_color:'#123', font_color:'#fff',font_size:40,height:340,text:\"hello3\",width:300,dataURL:''} },\r\n    ];\r\n\r\n    \r\nconst history = createReducer<HistoryState, HistoryAction>(initialState, {\r\n    [ADD_HISTORY]: (state, { payload: canvasValue }) =>\r\n      state.concat({\r\n        id: Math.max(0,...state.map(historyItem => historyItem.id)) + 1,\r\n        value: canvasValue\r\n      }),\r\n    [REMOVE_HISTORY]: (state, { payload: id }) =>\r\n      state.filter(historyItem => historyItem.id !== id)\r\n      \r\n  });\r\n  \r\nexport default history;\r\n","import { createAction } from 'typesafe-actions';\r\n\r\n// 액션 type\r\nexport const SET_CANVAS_SIZE = 'canvas/SET_CANVAS_SIZE';\r\nexport const SET_CANVAS_TEXT = 'canvas/SET_CANVAS_TEXT';\r\nexport const SET_CANVAS_FONT_SIZE = 'canvas/SET_CANVAS_FONT_SIZE';\r\nexport const SET_CANVAS_FONT_COLOR = 'canvas/SET_CANVAS_FONT_COLOR';\r\nexport const SET_CANVAS_BACKGROUND_COLOR = 'canvas/SET_CANVAS_BACKGROUND_COLOR';\r\nexport const SET_CANVAS_COLOR = 'canvas/SET_CANVAS_COLOR';\r\nexport const SET_CANVAS_DATA_URL = 'canvas/SET_CANVAS_DATA_URL';\r\n\r\n\r\n\r\n// 액션 생성 함수\r\nexport const setCanvasSize = createAction(SET_CANVAS_SIZE)<InputValue>();\r\nexport const setCanvasText = createAction(SET_CANVAS_TEXT)<string>();\r\nexport const setCanvasFontSize = createAction(SET_CANVAS_FONT_SIZE)<number>();\r\nexport const setCanvasFontColor = createAction(SET_CANVAS_FONT_COLOR)<string>();\r\nexport const setCanvasBackgroundColor = createAction(SET_CANVAS_BACKGROUND_COLOR)<string>();\r\nexport const setCanvasColor = createAction(SET_CANVAS_COLOR)<Colors>();\r\nexport const setCanvasDataURL = createAction(SET_CANVAS_DATA_URL)<string>();\r\n\r\n","export { default } from './reducer';\r\nexport * from './actions';\r\nexport * from './types';\r\n","\r\nexport function randomColorGenerator() {\r\n    var bg_colour = Math.floor(Math.random() * 16777215).toString(16);\r\n    bg_colour = '#' + ('000000' + bg_colour).slice(-6);\r\n    return bg_colour;\r\n  }\r\n\r\nexport function getColorByBgColor(bgColor: string) {\r\n    if (!bgColor) {\r\n        return '';\r\n    }\r\n    return parseInt(bgColor.replace('#', ''), 16) > 0xffffff / 2\r\n        ? '#000000'\r\n        : '#ffffff';\r\n}\r\n\r\nexport function saveAs(uri: string, filename: string) {\r\n    var link = document.createElement('a');\r\n    if (typeof link.download === 'string') {\r\n      link.href = uri;\r\n      link.download = filename;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    } else {\r\n      window.open(uri);\r\n    }\r\n}\r\n","import { createAction } from 'typesafe-actions';\r\nimport { Canvas } from '../canvas';\r\n\r\n// 액션 type\r\nexport const ADD_HISTORY = 'history/ADD_HISTORY';\r\nexport const REMOVE_HISTORY = 'history/REMOVE_HISTORY';\r\n\r\n// 액션 생성 함수\r\nexport const addHistory = createAction(ADD_HISTORY)<Canvas>();\r\nexport const removeHistory = createAction(REMOVE_HISTORY)<number>();\r\n","import React from 'react';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"Header row text-center mb-3\">\r\n    <a href=\"https://chinsun9.github.io/react-banner-maker/\">\r\n      <h1>react-banner-maker</h1>\r\n      </a>\r\n  </div>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport { RootState } from '../modules';\r\n\r\nexport default function useHistory() {\r\n  const history = useSelector((state: RootState) => state.history);\r\n  return history;\r\n}","import { useDispatch } from 'react-redux';\r\nimport { useCallback } from 'react';\r\nimport {\r\n\tsetCanvasDataURL,\r\n\tsetCanvasSize,\r\n\tsetCanvasText,\r\n\tsetCanvasFontSize,\r\n\tsetCanvasFontColor,\r\n\tsetCanvasBackgroundColor,\r\n\tsetCanvasColor,\r\n} from '../modules/canvas';\r\n\r\nexport default function useCanvasActions() {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst onChangeCanvasSize = useCallback((inputValue: InputValue) => dispatch(setCanvasSize(inputValue)), [dispatch]);\r\n\tconst onChangeCanvasText = useCallback((text) => dispatch(setCanvasText(text)), [dispatch]);\r\n\tconst onChangeCanvasFontSize = useCallback((size) => dispatch(setCanvasFontSize(size)), [dispatch]);\r\n\tconst onChangeCanvasFontColor = useCallback((color) => dispatch(setCanvasFontColor(color)), [dispatch]);\r\n\tconst onChangeCanvasBackgroundColor = useCallback((color) => dispatch(setCanvasBackgroundColor(color)), [dispatch]);\r\n\tconst randomCanvasColor = useCallback((colors: Colors) => dispatch(setCanvasColor(colors)), [dispatch]);\r\n\tconst onChangeCanvas = useCallback((dataURL) => dispatch(setCanvasDataURL(dataURL)), [dispatch]);\r\n\r\n\treturn {\r\n\t\tonChangeCanvas,\r\n\t\trandomCanvasColor,\r\n\t\tonChangeCanvasSize,\r\n\t\tonChangeCanvasText,\r\n\t\tonChangeCanvasFontSize,\r\n\t\tonChangeCanvasFontColor,\r\n\t\tonChangeCanvasBackgroundColor,\r\n\t};\r\n}\r\n","import React from 'react';\r\nimport { History } from '../modules/history';\r\nimport reactCSS from 'reactcss'\r\n\r\nimport './HistoryItem.css'\r\nimport useCanvasActions from '../hooks/useCanvasActions';\r\n\r\ntype HistoryItemProps = {\r\n  history: History;\r\n};\r\n\r\nfunction HistoryItem({ history }: HistoryItemProps) {\r\n\r\n    const { randomCanvasColor } = useCanvasActions();\r\n\r\n\r\n    const onApply = () => {\r\n\r\n      const {background_color, font_color} = history.value\r\n      \r\n      randomCanvasColor({background_color:background_color,font_color:font_color})\r\n    }\r\n\r\n    const styles = reactCSS({\r\n      'default': {\r\n        BackgroundColor: {\r\n          background: `${history.value.background_color}`,\r\n          color: `${history.value.font_color}`,\r\n        }\r\n      },\r\n    });\r\n  \r\n    return (\r\n      <div className={`col-1 HistoryItem`} style={styles.BackgroundColor}>\r\n        <span className=\"remove\" onClick={onApply}><strong>A</strong></span>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default HistoryItem;","import React from 'react';\r\nimport useHistory from '../hooks/useHistory';\r\nimport HistoryItem from './HistoryItem';\r\n\r\nimport './HistoryList.css';\r\n\r\n\r\nfunction HistoryList() {\r\n    const history = useHistory();\r\n\r\n  if (history.length === 0) return <p>copy, download 버튼을 누를때마다 히스토리에 추가됩니다</p>;\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4>your color history</h4> */}\r\n    <div className=\"HistoryList row\">\r\n      {history.map(history => (\r\n        <HistoryItem history={history} key={history.id} />\r\n      ))}\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HistoryList; ","import { useSelector } from 'react-redux';\r\nimport { RootState } from '../modules';\r\n\r\nexport default function useCanvas() {\r\n\tconst canvas = useSelector((state: RootState) => state.canvas);\r\n\r\n\treturn canvas;\r\n}\r\n","import React from 'react';\r\nimport useCanvas from '../hooks/useCanvas';\r\nimport useCanvasActions from '../hooks/useCanvasActions';\r\n\r\nimport './SettingCanvasSize.css'\r\n\r\nfunction SettingCanvasSize() {\r\n\r\n  const {width, height} = useCanvas();\r\n  \r\n  \r\n  const {onChangeCanvasSize} = useCanvasActions();\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault()\r\n    \r\n    const {name} = e.target\r\n    let value = Number(e.target.value)\r\n    \r\n    if(value < 1){\r\n      value = 1\r\n    }\r\n    onChangeCanvasSize({name:name,value: value})\r\n  }\r\n  \r\n\r\n  return (\r\n      <>\r\n    <div className=\"SettingCanvasSize row mb-3\">\r\n        <div className=\"input-group\">\r\n        <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text font-weight-bold\"\r\n            >width</span\r\n            >\r\n        </div>\r\n        <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            name=\"width\"\r\n            value={width}\r\n            placeholder=\"width\"\r\n            onChange={onChange}\r\n            min=\"1\"\r\n        />\r\n        </div>\r\n        <div className=\"input-group\">\r\n        <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text font-weight-bold\" \r\n            >height</span\r\n            >\r\n        </div>\r\n        <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            name=\"height\"\r\n            value={height}\r\n            placeholder=\"height\"\r\n            onChange={onChange}\r\n            min=\"1\"\r\n        />\r\n        </div>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingCanvasSize;","import React from 'react';\r\n\r\nexport default function SideTab() {\r\n  return (\r\n    <div className=\"sidetab\">\r\n      <div className=\"sideItem\">\r\n        <a\r\n          href=\"https://github.com/chinsun9/react-banner-maker\"\r\n          target=\"chinsun9 github\"\r\n        >\r\n          <svg\r\n            viewBox=\"64 64 896 896\"\r\n            focusable=\"false\"\r\n            className=\"\"\r\n            data-icon=\"github\"\r\n            width=\"1em\"\r\n            height=\"1em\"\r\n            fill=\"currentColor\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            <path d=\"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z\"></path>\r\n          </svg>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {  useEffect, useRef } from 'react';\r\nimport useCanvas from '../hooks/useCanvas';\r\nimport useCanvasActions from '../hooks/useCanvasActions';\r\nimport './Canvas.css'\r\n\r\nfunction Canvas() {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const {width, height, font_color, font_size, background_color, text} = useCanvas();\r\n  \r\n  const { onChangeCanvas } = useCanvasActions();\r\n\r\n  useEffect(() => {\r\n\r\n  const drawCanvas = (ctx: any) => {\r\n\r\n    ctx.clearRect(0, 0, width, height);\r\n\r\n    // 폰트\r\n    const color = font_color\r\n    const fontFamily = 'Helvetica';\r\n\r\n    // 배경색\r\n    const backgroundColor = background_color\r\n\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fillRect(0, 0, width, height);\r\n    \r\n\r\n    const fontSize = font_size\r\n\r\n    ctx.font = `${fontSize}px ${fontFamily}`;\r\n    ctx.textBaseline = 'middle';\r\n    ctx.textAlign = 'center';\r\n\r\n    ctx.fillStyle = color;\r\n\r\n    const defaultWidth = width / 2;\r\n    const defaultHeight = height / 2;\r\n\r\n    const fontHeight = fontSize * 1.4;\r\n    const SEPARATOR = '\\n';\r\n    const lines = text.split(SEPARATOR);\r\n\r\n    \r\n\r\n    if (lines.length % 2) {\r\n      lines.forEach((line, index) => {\r\n        const middle = parseInt((lines.length / 2).toString(), 10);\r\n        const h = defaultHeight + (index - middle) * fontHeight;\r\n        ctx.fillText(line, defaultWidth, h);\r\n        return null;\r\n      });\r\n    } else {\r\n      const mid = (lines.length - 1) / 2;\r\n      const offsets = lines\r\n        .map((_line, index) => index)\r\n        .reduce((prev: any[], curr) => {\r\n          const subtract = curr - mid;\r\n          prev.push([subtract < 0, parseInt(subtract.toString(), 10)]);\r\n          return prev;\r\n        }, []);\r\n      offsets.forEach(([sign, offset], index) => {\r\n        const position = offset * fontHeight;\r\n        const e = sign ? (fontHeight / 2) * -1 : fontHeight / 2;\r\n        const h = defaultHeight + position + e;\r\n        ctx.fillText(lines[index], defaultWidth, h);\r\n        return null;\r\n      });\r\n    }\r\n\r\n  }\r\n    \r\n    const canvas = (canvasRef as any).current\r\n    \r\n    \r\n    if(!canvas){\r\n      console.info(`no canvas`);\r\n      return;\r\n    }\r\n    \r\n    const ctx = canvas.getContext('2d')\r\n    \r\n    //Our draw come here\r\n    drawCanvas(ctx)\r\n    onChangeCanvas(canvas.toDataURL())\r\n\r\n  }, [width, height, font_color, font_size, background_color, text, onChangeCanvas])\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n        <canvas\r\n          ref={canvasRef}\r\n          id=\"myCanvas\"\r\n          width={width}\r\n          height={height}\r\n        >\r\n          Your browser does not support the canvas element.\r\n        </canvas>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Canvas;","import React, { CSSProperties } from 'react';\r\nimport useCanvas from '../hooks/useCanvas';\r\nimport useCanvasActions from '../hooks/useCanvasActions';\r\nimport './Textfield.css'\r\n\r\nfunction Textfield() {\r\n  const {text, width} = useCanvas();\r\n\r\n  \r\n  const {onChangeCanvasText} = useCanvasActions();\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    e.preventDefault()\r\n    \r\n    const {value} = e.target\r\n    onChangeCanvasText(value)\r\n  }\r\n  \r\n\r\n  const textfieldStyle: CSSProperties = {\r\n    width: width\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n    <div className=\"form-group\">\r\n      <textarea\r\n        className=\"form-control\"\r\n        id=\"textfield\"\r\n        placeholder=\"text here\"\r\n        rows={3}\r\n        style={textfieldStyle}\r\n        value={text}\r\n        onChange={onChange}\r\n      >\r\n      </textarea>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Textfield;","import React, { CSSProperties, useState } from 'react';\r\nimport { ColorResult, SketchPicker } from 'react-color';\r\nimport useCanvas from '../hooks/useCanvas';\r\nimport useCanvasActions from '../hooks/useCanvasActions';\r\nimport reactCSS from 'reactcss'\r\n\r\nimport './SettingCanvasDetail.css'\r\nimport { getColorByBgColor, randomColorGenerator } from '../modules/common/utils';\r\n\r\nfunction SettingCanvasSize() {\r\n\r\n  const { font_size, font_color, background_color } = useCanvas();\r\n  \r\n  \r\n  const {randomCanvasColor,onChangeCanvasFontSize,onChangeCanvasFontColor,onChangeCanvasBackgroundColor  } = useCanvasActions();\r\n\r\n  // const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   e.preventDefault()\r\n    \r\n  //   const {name, value} = e.target\r\n  //   onChangeCanvasSize({name:name,value: Number(value)})\r\n  // }\r\n\r\n  const randomBannerColor = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>{\r\n    e.preventDefault()\r\n\r\n    const background_color = randomColorGenerator()\r\n    const font_color = getColorByBgColor(background_color)\r\n\r\n    setFontColorPickerState({  ...fontColorPickerState, color: font_color })\r\n    setBackgroundColorPickerState({  ...backgroundColorPickerState, color:background_color})\r\n    randomCanvasColor({background_color:background_color,font_color:font_color})\r\n  }\r\n\r\n  const onChangeFontSize = (e: React.ChangeEvent<HTMLInputElement>)=>{\r\n    e.preventDefault()\r\n\r\n    onChangeCanvasFontSize(Number( e.target.value))\r\n  }\r\n  \r\n  const onChangeFontColor = (e: React.ChangeEvent<HTMLInputElement>)=>{\r\n    e.preventDefault()\r\n\r\n    setFontColorPickerState({  ...fontColorPickerState, color: e.target.value })\r\n    onChangeCanvasFontColor(e.target.value)\r\n  }\r\n  \r\n  \r\n  const onChangeBackgroundColor = (e: React.ChangeEvent<HTMLInputElement>)=>{\r\n    e.preventDefault()\r\n\r\n    setBackgroundColorPickerState({  ...backgroundColorPickerState, color: e.target.value })\r\n    onChangeCanvasBackgroundColor(e.target.value)\r\n  }\r\n\r\n\r\n\r\n  // color test\r\n\r\n  type MyState = {\r\n    displayColorPicker: boolean\r\n    color: string\r\n  }\r\n\r\n  const initialBackgroundColorPickerState: MyState = {\r\n    displayColorPicker: false,\r\n    color: background_color\r\n  };\r\n\r\n  const initialFontColorPickerState: MyState = {\r\n    displayColorPicker: false,\r\n    color: font_color\r\n  };\r\n\r\n  const [backgroundColorPickerState, setBackgroundColorPickerState] = useState(initialBackgroundColorPickerState)\r\n  const [fontColorPickerState, setFontColorPickerState] = useState(initialFontColorPickerState)\r\n \r\n\r\n  // font\r\n  const handleClickFontColor = () => {\r\n    setFontColorPickerState({ ...fontColorPickerState, displayColorPicker: !fontColorPickerState.displayColorPicker })\r\n  };\r\n\r\n  const handleCloseFontColor = () => {\r\n    setFontColorPickerState({  ...fontColorPickerState,displayColorPicker: false })\r\n  };\r\n\r\n  const handleChangeFontColor = (color: ColorResult) => {\r\n    setFontColorPickerState({  ...fontColorPickerState, color: color.hex })\r\n    onChangeCanvasFontColor(fontColorPickerState.color)\r\n  };\r\n\r\n  \r\n  // background\r\n  const handleClickBackgroundColor = () => {\r\n    setBackgroundColorPickerState({ ...backgroundColorPickerState, displayColorPicker: !backgroundColorPickerState.displayColorPicker })\r\n  };\r\n\r\n  const handleCloseBackgroundColor = () => {\r\n    setBackgroundColorPickerState({  ...backgroundColorPickerState,displayColorPicker: false })\r\n  };\r\n\r\n  const handleChangeBackgroundColor = (color: ColorResult) => {\r\n    setBackgroundColorPickerState({  ...backgroundColorPickerState, color: color.hex })\r\n    onChangeCanvasBackgroundColor(backgroundColorPickerState.color)\r\n  };\r\n\r\n  const styles = reactCSS({\r\n    'default': {\r\n      colorBackgroundColor: {\r\n        width: '36px',\r\n        height: '100%',\r\n        borderRadius: '2px',\r\n        background: `${backgroundColorPickerState.color}`,\r\n      },\r\n      colorFontColor: {\r\n        width: '36px',\r\n        height: '100%',\r\n        borderRadius: '2px',\r\n        background: `${fontColorPickerState.color}`,\r\n      },\r\n      swatch: {\r\n        padding: '5px',\r\n        background: '#fff',\r\n        borderRadius: '1px',\r\n        boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\r\n        display: 'inline-block',\r\n        cursor: 'pointer',\r\n      },\r\n      popover: {\r\n        position: 'absolute',\r\n        zIndex: 3 ,\r\n      }  as CSSProperties,\r\n      cover: {\r\n        position: 'fixed',\r\n        top: '0px',\r\n        right: '0px',\r\n        bottom: '0px',\r\n        left: '0px',\r\n      } as CSSProperties,\r\n    },\r\n  });\r\n\r\n  // color test\r\n  \r\n\r\n  return (\r\n      <>\r\n      <div className=\"SettingCanvasDetail row mb-2\">\r\n        <div className=\"input-group mb-3 \">\r\n          <div className=\"input-group-prepend\">\r\n            <label\r\n              className=\"input-group-text font-weight-bold\"\r\n              htmlFor=\"inputGroupSelect01\"\r\n              >Font Size</label>\r\n          </div>\r\n\r\n          <input\r\n            type=\"Number\"\r\n            name=\"fontsize\"\r\n            className=\"form-control\"\r\n            list=\"fontsizelist\"\r\n            value={font_size}\r\n            onChange={onChangeFontSize}\r\n            id=\"inputGroupSelect01\"\r\n          />\r\n          <datalist id=\"fontsizelist\">\r\n            <option value=\"20\">20</option>\r\n            <option value=\"30\">30</option>\r\n            <option value=\"40\">40</option>\r\n            <option value=\"60\">60</option>\r\n            <option value=\"80\">80</option>\r\n          </datalist>\r\n        </div>\r\n\r\n        <div id=\"fontColorPicker\" className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text font-weight-bold\" id=\"basic-addon1\"\r\n              >Font</span>\r\n          </div>\r\n\r\n          <input type=\"text\" className=\"form-control input-lg\" \r\n          value={fontColorPickerState.color}\r\n          onChange={onChangeFontColor}  />\r\n\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text colorpicker-input-addon\"><div>\r\n              <div style={ styles.swatch } onClick={ handleClickFontColor }>\r\n                <div style={ styles.colorFontColor } />\r\n              </div>\r\n              { fontColorPickerState.displayColorPicker ? <div style={ styles.popover }>\r\n                <div style={ styles.cover } onClick={ handleCloseFontColor }/>\r\n                <SketchPicker color={ fontColorPickerState.color } onChange={ handleChangeFontColor } />\r\n              </div> : null }\r\n\r\n            </div></span>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          id=\"backgroundColorPicker\"\r\n          className=\"input-group mb-3\"\r\n        >\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text font-weight-bold\" id=\"basic-addon1\"\r\n              >Back</span\r\n            >\r\n          </div>\r\n\r\n          <input type=\"text\" className=\"form-control input-lg\" \r\n          value={backgroundColorPickerState.color}\r\n          onChange={onChangeBackgroundColor}\r\n          />\r\n\r\n\r\n          <div className=\"input-group-append\">\r\n            <span className=\"input-group-text colorpicker-input-addon\"\r\n              ><div>\r\n              <div style={ styles.swatch } onClick={ handleClickBackgroundColor }>\r\n                <div style={ styles.colorBackgroundColor } />\r\n              </div>\r\n              { backgroundColorPickerState.displayColorPicker ? <div style={ styles.popover }>\r\n                <div style={ styles.cover } onClick={ handleCloseBackgroundColor }/>\r\n                <SketchPicker color={ backgroundColorPickerState.color } onChange={ handleChangeBackgroundColor } />\r\n              </div> : null }\r\n\r\n            </div></span>\r\n          </div>\r\n\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={randomBannerColor}\r\n              value=\"Random\"\r\n            >\r\n              Random\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SettingCanvasSize;","import React from 'react';\r\nimport useAddHistory from '../hooks/useAddHistory';\r\nimport useCanvas from '../hooks/useCanvas';\r\nimport useHistory from '../hooks/useHistory';\r\nimport { copyToClipboard } from '../modules/common/copyToClipboard';\r\nimport { saveAs } from '../modules/common/utils';\r\nimport './ExportButtons.css'\r\n\r\n\r\n\r\n\r\nexport default function ExportButtons() {\r\n\r\n  const {text, dataURL, font_color, background_color} = useCanvas();\r\n  const history = useHistory()\r\n\r\n\r\n  const addHistory = useAddHistory();\r\n\r\n  const copyBanner = ()=>{\r\n    copyToClipboard();\r\n\r\n    if(history.length === 0 ){\r\n      addHistory({font_color, background_color})\r\n      return\r\n    }\r\n\r\n    const last_history_item = history[history.length - 1].value;\r\n    if(last_history_item.background_color === background_color && last_history_item.font_color === font_color){\r\n      console.info (`이미 추가되어있음.`)\r\n      return\r\n    }\r\n    addHistory({font_color, background_color})\r\n  }\r\n\r\n\r\n  \r\n  const saveBanner = ()=>{\r\n    const filename = 'banner-maker ';\r\n    saveAs(dataURL, filename + text + '.png');\r\n    addHistory({font_color, background_color})\r\n  }\r\n  \r\n  return (\r\n    <div className=\"ExportButtons row\">\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-primary\"\r\n      onClick={copyBanner}\r\n    >\r\n      <i className=\"far fa-clipboard\"></i>\r\n      Copy</button>\r\n\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-primary\"\r\n      onClick={saveBanner}\r\n    ><i className=\"fas fa-download\"></i>\r\n          Download\r\n       </button>\r\n  </div>\r\n  );\r\n}\r\n","import { useDispatch } from 'react-redux';\r\nimport { useCallback } from 'react';\r\nimport { addHistory } from '../modules/history';\r\n\r\nexport default function useAddHistory() {\r\n\tconst dispatch = useDispatch();\r\n\treturn useCallback((canvas) => dispatch(addHistory(canvas)), [dispatch]);\r\n}\r\n","// Property 'write' does not exist on type 'Clipboard'.\r\n// ....\r\nexport function copyToClipboard() {\r\n  const canvas = document.querySelector(`#myCanvas`);\r\n  if (!canvas) {\r\n    return;\r\n  }\r\n  canvas.toBlob(function (blob) {\r\n    // eslint-disable-next-line no-undef\r\n    const item = new ClipboardItem({ 'image/png': blob });\r\n    navigator.clipboard.write([item]);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\n// import HistoryInsert from './components/HistoryInsert';\r\nimport HistoryList from './components/HistoryList';\r\nimport SettingCanvasSize from './components/SettingCanvasSize';\r\nimport SideTab from './components/SideTab';\r\nimport Canvas from './components/Canvas';\r\nimport Textfield from './components/Textfield';\r\nimport SettingCanvasDetail from './components/SettingCanvasDetail'\r\nimport ExportButtons from './components/ExportButtons';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n   \r\n    <div className=\"App container p-5\">\r\n    <Header></Header>\r\n    <SettingCanvasSize></SettingCanvasSize>\r\n    <Canvas></Canvas>\r\n    <Textfield></Textfield>\r\n    <SettingCanvasDetail></SettingCanvasDetail>\r\n    \r\n    <ExportButtons></ExportButtons>\r\n\r\n\r\n    {/* <HistoryInsert /> */}\r\n    <HistoryList />\r\n\r\n   </div>\r\n   <SideTab></SideTab>\r\n </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport history from './history';\r\nimport canvas from './canvas'\r\n\r\nconst rootReducer = combineReducers({\r\n  history,\r\n  canvas\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './modules';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export { default } from './reducer';\r\nexport * from './actions';\r\nexport * from './types';\r\n","import { createReducer } from 'typesafe-actions';\r\nimport { getColorByBgColor, randomColorGenerator } from '../common/utils';\r\nimport {SET_CANVAS_DATA_URL, SET_CANVAS_SIZE, SET_CANVAS_TEXT, SET_CANVAS_FONT_SIZE, SET_CANVAS_FONT_COLOR, SET_CANVAS_BACKGROUND_COLOR, SET_CANVAS_COLOR } from './actions';\r\nimport { CanvasState, CanvasAction } from './types';\r\n\r\n  \r\nconst initBackgroundColor = randomColorGenerator()\r\nconst initFontColor = getColorByBgColor(initBackgroundColor)\r\n\r\n// 초깃값 설정\r\nconst initialState: CanvasState = {background_color:initBackgroundColor ,font_color:initFontColor,font_size:40,height:366,width:624,text:'TEXT',dataURL:''}\r\n    \r\nconst canvas = createReducer<CanvasState, CanvasAction>(initialState, {\r\n  [SET_CANVAS_SIZE]: (state, action) => \r\n    {\r\n        return { ...state, [action.payload.name]: action.payload.value }\r\n    },\r\n    [SET_CANVAS_TEXT]: (state, action) => \r\n    {\r\n        return { ...state, text: action.payload }\r\n    },\r\n    [SET_CANVAS_FONT_SIZE]: (state, action) => \r\n    {\r\n        return { ...state, font_size: action.payload }\r\n    },\r\n    [SET_CANVAS_FONT_COLOR]:(state, action) => \r\n    {\r\n        return { ...state, font_color: action.payload }\r\n    },\r\n    [SET_CANVAS_BACKGROUND_COLOR]:(state, action) => \r\n    {\r\n        return { ...state, background_color: action.payload }\r\n    },\r\n    [SET_CANVAS_FONT_SIZE]:(state, action) => \r\n    {\r\n        return { ...state, font_size: action.payload }\r\n    },\r\n    [SET_CANVAS_COLOR]:(state,action)=> \r\n    {\r\n        const {background_color, font_color} = action.payload\r\n        return { ...state, background_color: background_color, font_color:font_color }\r\n    },\r\n    [SET_CANVAS_DATA_URL]:(state, action)=> \r\n    {\r\n        return { ...state, dataURL:action.payload }\r\n    },\r\n  });\r\n  \r\nexport default canvas;\r\n"],"sourceRoot":""}